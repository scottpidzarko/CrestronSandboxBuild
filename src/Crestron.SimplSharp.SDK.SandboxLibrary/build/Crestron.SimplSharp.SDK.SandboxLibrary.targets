<?xml version="1.0" encoding="utf-8" ?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0" >
  <PropertyGroup>
    <!-- force the use of the older csc to ensure output will be the same. MSBuild happily can target the right version of net framework/compact framework 
    when configured but newer compilers introduce non-sandbox compatible optimizations -->
	  <CscToolPath>$(Drive)\Windows\Microsoft.NET\Framework\v3.5</CscToolPath>
	  <CscToolExe>csc.exe</CscToolExe>
    <FrameworkRegistryBase>Software\Microsoft\.NETCompactFramework</FrameworkRegistryBase>
    <AssemblyFoldersSuffix>$(PlatformFamilyName)\AssemblyFoldersEx</AssemblyFoldersSuffix>
    <AssemblyFoldersExConditions>,OSVersion=$(OSVersion):Platform=$(PlatformID)</AssemblyFoldersExConditions>
    <TargetCompactFramework>true</TargetCompactFramework>
  </PropertyGroup>
  <Target Name="AlterProjectForNetCf" BeforeTargets="BeforeBuild;BeforeClean">
	 <AlterProjectFile projectFile="$(MSBuildProjectFullPath)" projectDirectory="$(ProjectDir)" />	 
  </Target>
  <UsingTask TaskName="AlterProjectFile" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
	<ParameterGroup>
      <projectFile ParameterType="System.String" Required="true" />
	  <projectDirectory ParameterType="System.String" Required="true" />
	</ParameterGroup>
	<Task>
      <Reference Include="System" />
      <Reference Include="System.IO" />
	  <Using Namespace="System" />
	  <Using Namespace="System.IO" />
	  <Code Type="Fragment" Language="cs">
        <![CDATA[
		try
		{
			// use \x24 because otherwise MSBuild picks it up as a property before it compiles, which means we can't use 
			// verbatim string literals
			const string SearchString1 = "<Import Project=\"\x24(MSBuildToolsPath)\\Microsoft.CSharp.targets\" />";
			const string Replacement1 = "<!-- <Import Project=\"\x24(MSBuildToolsPath)\\Microsoft.CSharp.targets\" /> -->";
			
			const string SearchString2 = "<Import Project=\"\x24(MSBuildExtensionsPath)\\\x24(MSBuildToolsVersion)\\Microsoft.Common.props\" Condition=\"Exists(\'\x24(MSBuildExtensionsPath)\\\x24(MSBuildToolsVersion)\\Microsoft.Common.props\')\" />";
			const string Replacement2 = "<!-- <Import Project=\"\x24(MSBuildExtensionsPath)\\\x24(MSBuildToolsVersion)\\Microsoft.Common.props\" Condition=\"Exists(\'\x24(MSBuildExtensionsPath)\\\x24(MSBuildToolsVersion)\\Microsoft.Common.props\')\" /> -->";
			
			string projectFileContents = File.ReadAllText(projectFile);
			
			if(!(projectFileContents.Contains(Replacement1) || projectFileContents.Contains(Replacement2)))
			{
				File.WriteAllText(projectFile, projectFileContents.Replace(SearchString1, Replacement1).Replace(SearchString2, Replacement2));
			}					
			
			string AssemblyInfoFile = Path.Combine(projectDirectory, "Properties", "AssemblyInfo.cs");
			
			if(File.Exists(AssemblyInfoFile))
			{
				var AssemblyInfoFileContents = File.ReadAllText(AssemblyInfoFile);
				if(!AssemblyInfoFileContents.Contains("//[assembly: AssemblyFileVersion"))
				{
					File.WriteAllText(AssemblyInfoFile, AssemblyInfoFileContents.Replace("[assembly: AssemblyFileVersion", "//[assembly: AssemblyFileVersion"));
				}
			}			
			
			return true;
		}
		catch (Exception ex)
		{
			Log.LogErrorFromException(ex);
			return false;
		}
		]]>
      </Code>
    </Task>
  </UsingTask>  
  <Target Name="SimplSharpSignProcess" BeforeTargets="SimplSharpPostProcess">
    <GetAssemblyIdentity AssemblyFiles="$(TargetPath)">
      <Output TaskParameter="Assemblies" ItemName="Assembly" />
    </GetAssemblyIdentity>
    <!-- from the MSBuild documentation -->
    <!-- OutputPath = relative output directory, no trailing slash eg. bin\Debug -->
    <!-- TargetName = name of assembly-->
    <!-- TargetPath	= The absolute path name of the primary output file for the build (defined as drive + path + base name + file extension) -->
    <!-- $(ProjectDir)	The directory of the project (defined as drive + path); includes the trailing backslash '\'. -->   
	<!-- archiveExtension comes from the Crestron SDK package -->
    <SignForSandboxTask programInfoFilename="$(OutputPath)\ProgramInfo.config" targetPath="$(TargetPath)" targetName="$(TargetName)" packagePath="$(MSBuildThisFileDirectory)" outputPath="$(OutputPath)" archiveFilename="$(TargetName)$(ArchiveExtension)" excludeTargets="$(MSBuildThisFileFullPath)" references="@(_ResolveAssemblyReferenceResolvedFiles)" assemblyVersion="%(Assembly.Version)" projectDir="$(ProjectDir)" targetDir="$(TargetDir)"/>    
  </Target>
  <UsingTask TaskName="SignForSandboxTask" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <programInfoFilename ParameterType="System.String" Required="true" />
      <targetPath ParameterType="System.String" Required="true" />
      <targetName ParameterType="System.String" Required="true" />
      <packagePath ParameterType="System.String" Required="true" />
      <outputPath ParameterType="System.String" Required="true" />
      <archiveFilename ParameterType="System.String" Required="true" />
      <excludeTargets ParameterType="System.String" Required="true" />
      <references ParameterType="System.String" Required="true" />
      <assemblyVersion ParameterType="System.String" Required="true" />
      <projectDir ParameterType="System.String" Required="true" />
      <targetDir ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="C:\Program Files (x86)\Crestron\Simpl#\Crestron.SIMPLSharp.dll" />
      <Reference Include="Crestron.CmVptCOM.interop" />
      <Reference Include="Crestron.VptCOMServer.interop" />
      <Reference Include="EnvDTE" />
      <Reference Include="EnvDTE" />
      <Reference Include="Microsoft.VisualStudio.OLE.Interop" />
      <Reference Include="Microsoft.VisualStudio.Shell.9.0" />
      <Reference Include="Microsoft.VisualStudio.Shell.Interop" />
      <Reference Include="Microsoft.VisualStudio.Shell.Interop.8.0" />
      <Reference Include="Microsoft.VisualStudio.Shell.Interop.9.0, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
      <Reference Include="System" />
      <Reference Include="System.Core" />
      <Reference Include="System.Design" />
      <Reference Include="System.Drawing" />
      <Reference Include="System.Windows.Forms" />
      <Reference Include="System.Xml" />
      <Reference Include="System.Xml.Linq" />
      <Reference Include="VSLangProj" />
      <Reference Include="VSLangProj80" />      
      <Reference Include="C:\Program Files (x86)\Crestron\Simpl#\Crestron.Tools.SIMPLSharp.Services.dll" />
      <Reference Include="C:\Program Files (x86)\Crestron\Simpl#\Interop.CAPICOM.dll" />
      <Reference Include="C:\Program Files (x86)\Crestron\Simpl#\Mono.Cecil.DLL" />
      <Reference Include="C:\Program Files (x86)\Crestron\Simpl#\Mono.Cecil.Pdb.DLL" />
      <Reference Include="C:\Program Files (x86)\Crestron\Simpl#\Newtonsoft.Json.DLL" />
      <Reference Include="C:\Program Files (x86)\Crestron\Simpl#\SimplSharpCustomAttributesInterface.DLL" />      
      <Reference Include="System" />
      <Reference Include="System.IO" />
	  <Reference Include="System.Linq" />
      <Reference Include="System.Reflection" />
	  <Reference Include="System.Xml" />
      <Using Namespace="Crestron.SIMPLSharp.VsPlugin" />
      <Using Namespace="Crestron.Tools.SIMPLSharp.Services" />
      <Using Namespace="System.Linq" />
      <Using Namespace="System.Reflection" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Xml" />    
      <Code Type="Fragment" Language="cs">
        <![CDATA[			                  
			  try
            {
                // Constants setup
                // TODO Expose this to MSBuild 
                string logfolder = @"SIMPLSharpLogs";
                string datapath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86), @"Crestron\Cresdb\Programming");
                bool refreshSdk = true;

                string path;
                // MSBuild docs say this has no trailing slash, but it appears it really does.
                // We don't want the trailing slash for the plugin
                if (projectDir[projectDir.Length - 1].Equals(Path.DirectorySeparatorChar))
                {
                    path = projectDir.Remove(projectDir.Length - 1, 1);
                }
                else
                {
                    path = projectDir;
                }


                string logpath = Path.Combine(path, logfolder);

                string absoluteOutputPath = targetDir;
                string fullAssemblyName = targetPath;
                string compiledFileName = archiveFilename;
                string archiveFullName = Path.Combine(absoluteOutputPath, compiledFileName);

                // setup the SIMPLSharp service
                const BindingFlags bf = BindingFlags.NonPublic | BindingFlags.Instance;
                var p = new SIMPLSharpPackage();
                Type t = p.GetType();
                var method = t.GetMethod("d", bf);
                if (method != null)
                {
                    method.Invoke(p, null);
                }
                else
                {
                    throw new Exception("Could not initialize the SimplSharp package. Initialization method was null.");
                }

                var data = t.GetProperty("ProviderConfig", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(p, null);

                SIMPLSharpService s;
                if (data != null)
                {
                    s = new SIMPLSharpService(data, targetName, path, logpath, refreshSdk, datapath);
                }
                else
                {
                    throw new Exception("Could not initialize SmplSharpService from plugin. Data was null.");
                }

                // these three fields are set up outside of making the simpl sharp service for some reason
                if (s.ProjectInfo.CompiledFilename == null)
                {
                    s.ProjectInfo.CompiledFilename = archiveFullName;
                }
                if (s.ProjectInfo.ProgramIdTag == null)
                {
                    s.ProjectInfo.ProgramIdTag = targetName;
                }
                if (s.ProjectInfo.SystemName == null)
                {
                    s.ProjectInfo.SystemName = targetName;
                }
                if (s.ProjectInfo.MinimumFirmwareVersion == null)
                {
                    s.SetMinimumFirmwareVersion("1.007.0017"); // TODO figure out how to systematically generate this?
                }

                // SDK resources not set by the SIMPLSharpProject class or any decendants
                // set by SIMPLSharpPackage			
                // the vsplugin builds this by comparing the project references with the list of sdkassemblies from SimplSharp service 
                // and the system assemblies from simplsharp service, and the deprecated assemblies from simplsharp service
                IList<ReferenceInfo> projectReferences = new List<ReferenceInfo>(); // TODO add code to generate this. Can we get from MSBuild?

                // I can't remember what the purpose of the result of this was in the actual plugin.
                // TODO determine what to do with the result here - tests didn't use the result
                s.ReconcileProjectReferences(projectReferences);
                // I can't remember what the purpose of the result of this was in the actual plugin.
                // TODO determine what to do with the result here - tests didn't use the result
                s.IsAssemblyVerified(fullAssemblyName);

                IList<string> resolutionPaths = new List<string>
                {
                    absoluteOutputPath,
                    SIMPLSharpService.SDKPath
                };
                // string passed is the full assembly name, which we get from SimplSharp project FullAssemblyName
                // for generateDebugSysmbols, we *may* have to set this to false in order to get Mono.Cecil to like the pdb format
                // TODO determine if we need to true/false and if that can depend on the project debug/release configuration passed in from MSBuild
                var result1 = s.ValidateAssembly(fullAssemblyName, resolutionPaths, false);
                if (!result1.IsValid)
                {
                    StringBuilder sb = new StringBuilder();

                    foreach (var error in result1.Errors)
                    {
                        sb.Append(String.Format("Sandbox validation error: {0}\r\n", error));
                    }
                    throw new Exception(sb.ToString());
                }

                //string passed is the full assembly name, which we get from Simplsharp project FullAssemblyName
                var result2 = s.VerifyAssembly(fullAssemblyName);
                if (!result2)
                {
                    throw new Exception("Assembly could not be verified by S# plugin.");
                }

                //Create a list of dependency info
                var dependencies = new List<ReferenceInfo>(); // list of all files in the output path that have a .dll or .exe extension that isn't FullAssemblyName
                List<string> source = new List<string>
                {
                    ".dll",
                    ".exe"
                };
                string[] filesInDirectory = Directory.GetFiles(absoluteOutputPath, "*.*", SearchOption.AllDirectories);
                foreach (var text in filesInDirectory)
                {
                    if (source.Contains(Path.GetExtension(text), StringComparer.OrdinalIgnoreCase) && text != fullAssemblyName)
                    {
                        ReferenceInfo item = new ReferenceInfo
                        {
                            CopyLocal = true,
                            Filename = text, // full assembly name for file - dll or exe, ie. @"C:\Users\Username\OtherDirs\ProjectDir\bin\Debug\Newtonsoft.Json.Compact.dll"
                            ReferenceType = ReferenceType.Assembly,
                            IsVerified = true
                        };
                        dependencies.Add(item);
                    }
                }

                // list of everything in the output path that doesn't have .info, .pdb, .config, .clz, .cplz, .cpz, .dll, and .exe? Unsure if it actually does that, it builds a list of that and never returns it.
                // list of everything in the SimplSharpProject's SDK resources enumerator then gets copied to the output path and also added to this list
                var simplSharpReferences = new List<string>();
                foreach (ResourceFileInfo resourceFileInfo in SIMPLSharpService.SDKResources)
                {
                    if (!simplSharpReferences.Contains(resourceFileInfo.Filename, StringComparer.OrdinalIgnoreCase))
                    {
                        string text = Path.Combine(absoluteOutputPath, resourceFileInfo.Filename);
                        File.Copy(resourceFileInfo.Fullname, text, true);
                        simplSharpReferences.Add(text);
                    }
                }

                Log.LogMessage("Creating project manifest");
                s.CreateManifest(fullAssemblyName, compiledFileName, dependencies, simplSharpReferences);

                // If the project depends on the Crestron SDK nuget package to do the archiving we don't need to use the
                // below. Included for posterity
                /*
                IList<string> ListOfDllsInProjectInfo;
                // I think the below is how the plugin does it.
                ListOfDllsInProjectInfo = SIMPLSharpService.SystemAssemblies
                    .Select(x => x.Filename)
                    .Distinct()
                    .ToList<string>();
                 s.CreateArchive(
					absoluteOutputPath,
					ListOfDllsInProjectInfo,
					archiveFullName); 
				*/                

                return true;

            }
            catch (Exception ex)
            {
                Log.LogErrorFromException(ex);
                Log.LogError(ex.StackTrace);
                return false;
            }
				
				]]>
      </Code>
    </Task>
  </UsingTask>  
  <Import Project="C:\Windows\Microsoft.NET\Framework\v3.5\Microsoft.CSharp.Targets" />
  <Import Project="C:\Windows\Microsoft.NET\Framework\v3.5\Microsoft.CompactFramework.Common.targets" />
</Project>